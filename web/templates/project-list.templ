package templates

templ ProjectList(repositories []interface{}) {
	<div class="space-y-4">
		<div class="text-sm text-gray-600 mb-4">
			Select a repository from your GitHub account to deploy:
		</div>
		
		if len(repositories) == 0 {
			<div class="text-center py-8">
				<div class="w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
					<svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
					</svg>
				</div>
				<h3 class="text-lg font-medium text-gray-900 mb-2">No repositories available</h3>
				<p class="text-gray-600">All your repositories are already deployed or you don't have any repositories yet.</p>
			</div>
		} else {
			<div class="max-h-96 overflow-y-auto space-y-3">
				for _, repo := range repositories {
					@RepositoryItem(repo)
				}
			</div>
		}
	</div>
}

templ RepositoryItem(repo interface{}) {
	<form 
		hx-post="/projects"
		hx-trigger="click"
		hx-target="body"
		class="border border-gray-200 rounded-lg p-4 hover:bg-gray-50 hover:ring-2 hover:ring-blue-500 transition-all cursor-pointer block"
	>
		<input type="hidden" name="name" value={ getRepoName(repo) }/>
		<input type="hidden" name="repository" value={ getRepoCloneURL(repo) }/>
		<input type="hidden" name="branch" value="main"/>
		
		<div class="flex justify-between items-start">
			<div class="flex-1">
				<h4 class="font-medium text-gray-900">{ getRepoName(repo) }</h4>
				if getRepoDescription(repo) != "" {
					<p class="text-sm text-gray-600 mt-1">{ getRepoDescription(repo) }</p>
				}
				<div class="flex items-center mt-2 text-xs text-gray-500">
					<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
					</svg>
					Updated { getRepoUpdatedAt(repo) }
				</div>
			</div>
		</div>
	</form>
}

func getRepoName(repo interface{}) string {
	if r, ok := repo.(map[string]interface{}); ok {
		if name, ok := r["name"].(string); ok {
			return name
		}
	}
	return "Unknown"
}

func getRepoDescription(repo interface{}) string {
	if r, ok := repo.(map[string]interface{}); ok {
		if desc, ok := r["description"].(string); ok {
			return desc
		}
	}
	return ""
}

func getRepoCloneURL(repo interface{}) string {
	if r, ok := repo.(map[string]interface{}); ok {
		if url, ok := r["clone_url"].(string); ok {
			return url
		}
	}
	return ""
}

func getRepoUpdatedAt(repo interface{}) string {
	if r, ok := repo.(map[string]interface{}); ok {
		if updated, ok := r["updated_at"].(string); ok {
			return updated
		}
	}
	return ""
}

 