package templates

import (
	"deployer/internal/models"
	"fmt"
	"strconv"
	"strings"
)

templ ProjectDetails(project *models.Project, deployments []models.Deployment, user *models.User) {
	@Base(fmt.Sprintf("%s - Project Details", project.Name)) {
		<div class="min-h-screen bg-dark-900 text-white">
			<!-- Sidebar -->
			<div class="fixed inset-y-0 left-0 z-50 w-64 bg-dark-800/80 backdrop-blur-md border-r border-neon-blue/20">
				<div class="flex flex-col h-full">
					<div class="p-6">
						<h2 class="text-xl font-bold bg-gradient-to-r from-neon-blue to-neon-purple bg-clip-text text-transparent">
							GoTH Deployer
						</h2>
					</div>
					<nav class="flex-1 px-4">
						<a href="/dashboard" class="flex items-center px-4 py-3 rounded-lg hover:bg-dark-700/50 transition-all duration-300 mb-2">
							<i class="fas fa-arrow-left mr-3 text-neon-blue"></i>
							<span>Back to Dashboard</span>
						</a>
					</nav>
					<div class="p-4 border-t border-dark-700">
						<div class="flex items-center p-3 rounded-lg bg-dark-700/50">
							<img src={ user.AvatarURL } alt="User Avatar" class="w-8 h-8 rounded-full mr-3"/>
							<span class="text-sm font-medium">{ user.Username }</span>
						</div>
					</div>
				</div>
			</div>

			<!-- Main Content -->
			<div class="ml-64 p-8">
				<!-- Project Header -->
				<div class="mb-8">
					<div class="flex items-center justify-between mb-4">
						<div>
							<h1 class="text-3xl font-bold text-white mb-2">{ project.Name }</h1>
							<p class="text-gray-400 flex items-center">
								<i class="fab fa-github mr-2"></i>
								{ project.Repository }
							</p>
						</div>
						<div class="flex items-center space-x-4">
							if project.Status == "active" {
								<span class="flex items-center px-4 py-2 rounded-full bg-neon-green/20 text-neon-green border border-neon-green/30">
									<div class="w-2 h-2 bg-neon-green rounded-full mr-2 animate-pulse"></div>
									Active
								</span>
							} else if project.Status == "building" {
								<span class="flex items-center px-4 py-2 rounded-full bg-neon-yellow/20 text-neon-yellow border border-neon-yellow/30">
									<i class="fas fa-spinner animate-spin mr-2"></i>
									Building
								</span>
							} else if project.Status == "failed" {
								<span class="flex items-center px-4 py-2 rounded-full bg-neon-pink/20 text-neon-pink border border-neon-pink/30">
									<i class="fas fa-times-circle mr-2"></i>
									Failed
								</span>
							} else {
								<span class="flex items-center px-4 py-2 rounded-full bg-gray-600/20 text-gray-400 border border-gray-600/30">
									<i class="fas fa-pause-circle mr-2"></i>
									Idle
								</span>
							}
						</div>
					</div>

					<!-- Project Info Cards -->
					<div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
						<div class="bg-dark-800/60 backdrop-blur-md rounded-xl p-6 border border-neon-blue/20 hover:border-neon-blue/40 transition-all duration-300">
							<div class="flex items-center justify-between">
								<div>
									<p class="text-sm text-gray-400 mb-1">Subdomain</p>
									<p class="text-lg font-semibold text-white">{ project.Subdomain }</p>
								</div>
								<div class="p-3 bg-neon-blue/20 rounded-lg">
									<i class="fas fa-globe text-neon-blue"></i>
								</div>
							</div>
						</div>

						<div class="bg-dark-800/60 backdrop-blur-md rounded-xl p-6 border border-neon-purple/20 hover:border-neon-purple/40 transition-all duration-300">
							<div class="flex items-center justify-between">
								<div>
									<p class="text-sm text-gray-400 mb-1">Branch</p>
									<p class="text-lg font-semibold text-white">{ project.Branch }</p>
								</div>
								<div class="p-3 bg-neon-purple/20 rounded-lg">
									<i class="fas fa-code-branch text-neon-purple"></i>
								</div>
							</div>
						</div>

						<div class="bg-dark-800/60 backdrop-blur-md rounded-xl p-6 border border-neon-green/20 hover:border-neon-green/40 transition-all duration-300">
							<div class="flex items-center justify-between">
								<div>
									<p class="text-sm text-gray-400 mb-1">Created</p>
									<p class="text-lg font-semibold text-white">{ project.CreatedAt.Format("Jan 02") }</p>
								</div>
								<div class="p-3 bg-neon-green/20 rounded-lg">
									<i class="fas fa-calendar text-neon-green"></i>
								</div>
							</div>
						</div>

						<div class="bg-dark-800/60 backdrop-blur-md rounded-xl p-6 border border-neon-yellow/20 hover:border-neon-yellow/40 transition-all duration-300">
							<div class="flex items-center justify-between">
								<div>
									<p class="text-sm text-gray-400 mb-1">Last Deploy</p>
									if project.LastDeployAt != nil {
										<p class="text-lg font-semibold text-white">{ project.LastDeployAt.Format("Jan 02") }</p>
									} else {
										<p class="text-lg font-semibold text-gray-400">Never</p>
									}
								</div>
								<div class="p-3 bg-neon-yellow/20 rounded-lg">
									<i class="fas fa-rocket text-neon-yellow"></i>
								</div>
							</div>
						</div>
					</div>

					<!-- Action Buttons -->
					<div class="flex space-x-4 mb-8">
						if project.Status == "active" {
							<button 
								hx-post={ fmt.Sprintf("/projects/%d/stop", project.ID) }
								hx-confirm="Are you sure you want to stop this deployment?"
								hx-trigger="click"
								hx-target="body"
								hx-swap="outerHTML"
								class="px-6 py-3 bg-gradient-to-r from-neon-pink to-pink-600 hover:from-pink-600 hover:to-neon-pink rounded-lg font-semibold transition-all duration-300 transform hover:scale-105 hover:shadow-lg hover:shadow-neon-pink/25">
								<i class="fas fa-stop mr-2"></i>Stop Deployment
							</button>
						} else if project.Status == "idle" || project.Status == "failed" {
							<button 
								hx-post={ fmt.Sprintf("/projects/%d/deploy", project.ID) }
								hx-confirm="Are you sure you want to deploy this project?"
								hx-trigger="click"
								hx-target="body"
								hx-swap="outerHTML"
								class="px-6 py-3 bg-gradient-to-r from-neon-green to-green-600 hover:from-green-600 hover:to-neon-green rounded-lg font-semibold transition-all duration-300 transform hover:scale-105 hover:shadow-lg hover:shadow-neon-green/25">
								<i class="fas fa-play mr-2"></i>Deploy
							</button>
						}
						
						if project.Status == "active" {
							<a href={ templ.URL(fmt.Sprintf("http://%s.localhost:8080", project.Subdomain)) } target="_blank"
								class="px-6 py-3 bg-gradient-to-r from-neon-blue to-blue-600 hover:from-blue-600 hover:to-neon-blue rounded-lg font-semibold transition-all duration-300 transform hover:scale-105 hover:shadow-lg hover:shadow-neon-blue/25">
								<i class="fas fa-external-link-alt mr-2"></i>Visit Site
							</a>
						}

						<button 
							hx-delete={ fmt.Sprintf("/projects/%d", project.ID) }
							hx-confirm="Are you sure you want to delete this project? This action cannot be undone."
							hx-trigger="click"
							hx-target="body"
							hx-swap="outerHTML"
							class="px-6 py-3 bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-600 rounded-lg font-semibold transition-all duration-300 transform hover:scale-105 hover:shadow-lg hover:shadow-red-500/25">
							<i class="fas fa-trash mr-2"></i>Delete Project
						</button>
					</div>
				</div>

				<!-- Environment Variables Section -->
				<div class="mb-8">
					<div class="flex items-center justify-between mb-6">
						<h2 class="text-2xl font-bold text-white flex items-center">
							<i class="fas fa-key mr-3 text-neon-orange"></i>
							Environment Variables
						</h2>
						<button 
							onclick="showAddSecretModal()"
							class="px-4 py-2 bg-gradient-to-r from-neon-orange to-orange-600 hover:from-orange-600 hover:to-neon-orange rounded-lg font-semibold transition-all duration-300 transform hover:scale-105 hover:shadow-lg hover:shadow-neon-orange/25">
							<i class="fas fa-plus mr-2"></i>Add Variable
						</button>
					</div>
					
					<div id="secrets-container" 
						 hx-get={ fmt.Sprintf("/projects/%d/secrets", project.ID) }
						 hx-trigger="load, secretCreated from:body, secretUpdated from:body, secretDeleted from:body"
						 hx-swap="innerHTML"
						 class="bg-dark-800/60 backdrop-blur-md rounded-xl border border-neon-orange/20 p-6">
						<div class="flex items-center justify-center py-8">
							<i class="fas fa-spinner animate-spin text-neon-orange mr-2"></i>
							<span class="text-gray-400">Loading environment variables...</span>
						</div>
					</div>
				</div>

				<!-- Build Logs Section -->
				if project.BuildLogs != "" {
					<div class="mb-8">
						<h2 class="text-2xl font-bold text-white mb-6 flex items-center">
							<i class="fas fa-terminal mr-3 text-neon-blue"></i>
							Build Logs
						</h2>
						<div class="bg-dark-800/60 backdrop-blur-md rounded-xl border border-neon-blue/20 overflow-hidden">
							<div class="p-4 border-b border-dark-700">
								<div class="flex items-center justify-between">
									<h3 class="font-semibold text-white">Latest Build Output</h3>
									if strings.Contains(project.BuildLogs, "ERROR:") {
										<span class="px-3 py-1 text-xs rounded-full bg-neon-pink/20 text-neon-pink border border-neon-pink/30">
											Build Failed
										</span>
									} else {
										<span class="px-3 py-1 text-xs rounded-full bg-neon-green/20 text-neon-green border border-neon-green/30">
											Build Successful
										</span>
									}
								</div>
							</div>
							<div class="p-6">
								<pre class="text-sm text-gray-300 whitespace-pre-wrap overflow-x-auto font-mono bg-black/30 p-4 rounded-lg">{ project.BuildLogs }</pre>
							</div>
						</div>
					</div>
				}

				<!-- Deployment History -->
				<div>
					<h2 class="text-2xl font-bold text-white mb-6 flex items-center">
						<i class="fas fa-history mr-3 text-neon-purple"></i>
						Deployment History
					</h2>
					
					if len(deployments) > 0 {
						<div class="space-y-4">
							for _, deployment := range deployments {
								<div class="bg-dark-800/60 backdrop-blur-md rounded-xl p-6 border border-dark-700 hover:border-neon-purple/40 transition-all duration-300">
									<div class="flex items-center justify-between mb-4">
										<div class="flex items-center space-x-4">
											if deployment.Status == "success" {
												<div class="w-3 h-3 bg-neon-green rounded-full"></div>
												<span class="text-neon-green font-semibold">Successful</span>
											} else if deployment.Status == "failed" {
												<div class="w-3 h-3 bg-neon-pink rounded-full"></div>
												<span class="text-neon-pink font-semibold">Failed</span>
											} else if deployment.Status == "building" {
												<div class="w-3 h-3 bg-neon-yellow rounded-full animate-pulse"></div>
												<span class="text-neon-yellow font-semibold">Building</span>
											} else {
												<div class="w-3 h-3 bg-gray-400 rounded-full"></div>
												<span class="text-gray-400 font-semibold">{ strings.Title(deployment.Status) }</span>
											}
											if deployment.CommitSHA != "" {
												<span class="text-sm text-gray-400 font-mono">{ deployment.CommitSHA[:8] }</span>
											}
										</div>
										<div class="text-sm text-gray-400">
											{ deployment.StartedAt.Format("Jan 02, 2006 15:04") }
										</div>
									</div>
									
									if deployment.ErrorMessage != "" {
										<div class="mb-4 p-4 bg-neon-pink/10 border border-neon-pink/20 rounded-lg">
											<p class="text-neon-pink text-sm font-semibold mb-2">Error:</p>
											<p class="text-gray-300 text-sm">{ deployment.ErrorMessage }</p>
										</div>
									}
									
									if deployment.Logs != "" {
										<details class="mt-4">
											<summary class="cursor-pointer text-neon-blue hover:text-neon-purple transition-colors duration-300">
												View Deployment Logs
											</summary>
											<div class="mt-4 p-4 bg-black/30 rounded-lg">
												<pre class="text-sm text-gray-300 whitespace-pre-wrap overflow-x-auto font-mono">{ deployment.Logs }</pre>
											</div>
										</details>
									}
								</div>
							}
						</div>
					} else {
						<div class="bg-dark-800/60 backdrop-blur-md rounded-xl p-12 border border-dark-700 text-center">
							<i class="fas fa-rocket text-6xl text-gray-600 mb-4"></i>
							<h3 class="text-xl font-semibold text-gray-400 mb-2">No Deployments Yet</h3>
							<p class="text-gray-500">This project hasn't been deployed yet. Click the Deploy button to get started!</p>
						</div>
					}
				</div>
			</div>
		</div>
		
		<!-- Add Secret Modal -->
		<div id="addSecretModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm hidden z-50 flex items-center justify-center" data-project-id={ strconv.Itoa(project.ID) }>
			<div class="bg-dark-800 rounded-xl p-6 w-full max-w-md mx-4 border border-neon-orange/30">
				<div class="flex items-center justify-between mb-6">
					<h3 class="text-xl font-bold text-white">Add Environment Variable</h3>
					<button onclick="hideAddSecretModal()" class="text-gray-400 hover:text-white transition-colors">
						<i class="fas fa-times"></i>
					</button>
				</div>
				
				<form id="addSecretForm" onsubmit="addSecret(event)">
					<div class="mb-4">
						<label class="block text-sm font-medium text-gray-300 mb-2">Key Name</label>
						<input type="text" id="secretKey" name="key_name" required
							   class="w-full px-3 py-2 bg-dark-700 border border-gray-600 rounded-lg text-white focus:border-neon-orange focus:outline-none"/>
						<p class="text-xs text-gray-500 mt-1">e.g., DATABASE_URL, API_KEY</p>
					</div>
					
					<div class="mb-4">
						<label class="block text-sm font-medium text-gray-300 mb-2">Value</label>
						<input type="password" id="secretValue" name="value" required autocomplete="new-password"
							   class="w-full px-3 py-2 bg-dark-700 border border-gray-600 rounded-lg text-white focus:border-neon-orange focus:outline-none"/>
					</div>
					
					<div class="mb-6">
						<label class="block text-sm font-medium text-gray-300 mb-2">Description (Optional)</label>
						<input type="text" id="secretDescription" name="description"
							   class="w-full px-3 py-2 bg-dark-700 border border-gray-600 rounded-lg text-white focus:border-neon-orange focus:outline-none"
							   placeholder="Brief description of this variable"/>
					</div>
					
					<div class="flex space-x-3">
						<button type="submit" 
								class="flex-1 px-4 py-2 bg-gradient-to-r from-neon-orange to-orange-600 hover:from-orange-600 hover:to-neon-orange rounded-lg font-semibold transition-all duration-300">
							Add Variable
						</button>
						<button type="button" onclick="hideAddSecretModal()"
								class="px-4 py-2 bg-gray-600 hover:bg-gray-500 rounded-lg font-semibold transition-colors">
							Cancel
						</button>
					</div>
				</form>
			</div>
		</div>

		<script>
			let projectId = null;
			
			function showAddSecretModal() {
				const modal = document.getElementById('addSecretModal');
				if (modal) {
					modal.classList.remove('hidden');
				}
			}
			
			function hideAddSecretModal() {
				const modal = document.getElementById('addSecretModal');
				const form = document.getElementById('addSecretForm');
				if (modal) {
					modal.classList.add('hidden');
				}
				if (form) {
					form.reset();
				}
			}
			
			function addSecret(event) {
				event.preventDefault();
				
				const formData = new FormData(event.target);
				const data = Object.fromEntries(formData);
				
				fetch(`/projects/${projectId}/secrets`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify(data)
				})
				.then(response => response.json())
				.then(data => {
					if (data.success) {
						hideAddSecretModal();
						// Trigger HTMX to reload secrets
						htmx.trigger(document.body, 'secretCreated');
					} else {
						alert(data.message || 'Error adding secret');
					}
				})
				.catch(error => {
					console.error('Error:', error);
					alert('Error adding secret');
				});
			}
			
			function deleteSecret(secretId) {
				if (!confirm('Are you sure you want to delete this environment variable?')) {
					return;
				}
				
				fetch(`/projects/${projectId}/secrets/${secretId}`, {
					method: 'DELETE'
				})
				.then(response => response.json())
				.then(data => {
					if (data.success) {
						htmx.trigger(document.body, 'secretDeleted');
					} else {
						alert(data.message || 'Error deleting secret');
					}
				})
				.catch(error => {
					console.error('Error:', error);
					alert('Error deleting secret');
				});
			}
			
			function toggleSecretValue(secretId, element) {
				const isHidden = element.textContent.includes('*');
				
				if (isHidden) {
					// Show value
					fetch(`/projects/${projectId}/secrets/${secretId}/value`)
					.then(response => response.json())
					.then(data => {
						element.textContent = data.value;
						element.nextElementSibling.innerHTML = '<i class="fas fa-eye-slash"></i>';
					})
					.catch(error => {
						console.error('Error:', error);
						alert('Error retrieving secret value');
					});
				} else {
					// Hide value
					location.reload(); // Simple way to reset to masked values
				}
			}
			
			// Initialize when DOM is ready
			document.addEventListener('DOMContentLoaded', function() {
				const modal = document.getElementById('addSecretModal');
				
				// Get project ID from data attribute
				if (modal) {
					projectId = modal.getAttribute('data-project-id');
				}
			});
		</script>
	}
} 